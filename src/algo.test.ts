import { Loadout, roundToNearestStep, solve } from './algo';

const roundingTable: [number, number, number][] = [
  [100, 3, 99],
  [101, 3, 102],
  [102, 3, 102],
  [103, 3, 102],
  [104, 3, 105],
  [105, 3, 105],

  [100, 5, 100],
  [101, 5, 100],
  [102, 5, 100],
  [103, 5, 105],
  [104, 5, 105],
  [105, 5, 105],
];

describe(roundToNearestStep, () => {
  it.each(roundingTable)(
    '%s rounded to the nearest %s is %s',
    (value, step, expected) => {
      // ACT
      const result = roundToNearestStep(value, step);

      // ASSERT
      expect(result).toEqual(expected);
    },
  );
});

const solveTable: [number, number, number, number, number[]][] = [
  // 30 bar @ 100%
  [30, 1, 30, 30, []],
  [50, 1, 30, 50, [10]],
  [75, 1, 30, 75, [15, 5, 2.5]],
  [100, 1, 30, 100, [35]],
  [125, 1, 30, 125, [45, 2.5]],
  [150, 1, 30, 150, [45, 15]],
  [175, 1, 30, 175, [45, 25, 2.5]],
  [200, 1, 30, 200, [45, 35, 5]],

  // 30 bar @ 85%
  [50, 0.85, 30, 45, [5, 2.5]],
  [75, 0.85, 30, 65, [15, 2.5]],
  [100, 0.85, 30, 85, [25, 2.5]],
  [125, 0.85, 30, 105, [35, 2.5]],
  [150, 0.85, 30, 130, [45, 5]],
  [175, 0.85, 30, 150, [45, 15]],
  [200, 0.85, 30, 170, [45, 25]],

  // 30 bar @ 78%
  [50, 0.78, 30, 40, [5]],
  [75, 0.78, 30, 60, [15]],
  [100, 0.78, 30, 80, [25]],
  [125, 0.78, 30, 100, [35]],
  [150, 0.78, 30, 115, [35, 5, 2.5]],
  [175, 0.78, 30, 135, [45, 5, 2.5]],
  [200, 0.78, 30, 155, [45, 15, 2.5]],

  // 45 bar @ 100%
  [45, 1, 45, 45, []],
  [135, 1, 45, 135, [45]],
  [225, 1, 45, 225, [45, 45]],
  [315, 1, 45, 315, [45, 45, 45]],
  [405, 1, 45, 405, [45, 45, 45, 45]],
  [495, 1, 45, 495, [45, 45, 45, 45, 45]],

  // 45 bar @ 85%
  [135, 0.85, 45, 115, [35]],
  [225, 0.85, 45, 190, [45, 25, 2.5]],
  [315, 0.85, 45, 270, [45, 45, 15, 5, 2.5]],
  [405, 0.85, 45, 345, [45, 45, 45, 15]],
  [495, 0.85, 45, 420, [45, 45, 45, 45, 5, 2.5]],

  // 45 bar @ 78%
  [135, 0.78, 45, 105, [25, 5]],
  [225, 0.78, 45, 175, [45, 15, 5]],
  [315, 0.78, 45, 245, [45, 45, 10]],
  [405, 0.78, 45, 315, [45, 45, 45]],
  [495, 0.78, 45, 385, [45, 45, 45, 35]],

  // Absurd
  [-100, 1, 30, 30, []],
  [10, 1, 30, 30, []],
  [40, 0.5, 30, 30, []],
  [-100, 1, 45, 45, []],
  [10, 1, 45, 45, []],
  [40, 0.5, 45, 45, []],
];

describe(solve, () => {
  it.each(solveTable)(
    '%s x %s (bar: %s)',
    (max, percent, bar, total, plates) => {
      // ACT
      const result = solve(max, percent, bar);

      // ASSERT
      expect(result).toEqual<Loadout>({ total, bar, plates });
    },
  );
});
